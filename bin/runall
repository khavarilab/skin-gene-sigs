#!/usr/bin/env python

import os
import re
import json
import glob
import argparse
import pkg_resources

import numpy as np
import pandas as pd

from src.annotations import get_proteincoding_gene_list_from_gtf
from src.annotations import get_ensembl_to_geneid_mapping
from src.utils import make_matrix
from src.utils import filter_by_ids
from src.utils import filter_for_expressed
from src.utils import run_sequential_deseq2
from src.utils import make_gene_signature_file


def parse_args():
    """set up args
    """
    parser = argparse.ArgumentParser(
        description='make gene sets')
    parser.add_argument(
        "-o", "--out_dir", dest="out_dir", type=str, default=os.getcwd(),
        help = "Output directory (default: current dir)")

    args = parser.parse_args()
    
    return args


def main():
    """run all
    """
    # parse args
    args = parse_args()
    os.system("mkdir -p {}".format(args.out_dir))

    # load inputs
    args.inputs = {}
    json_files = glob.glob(
        pkg_resources.resource_filename("src", 'data/*.json'))
    for json_file in json_files:
        key_name = os.path.basename(json_file).split('.json')[0]
        with open(json_file, 'r') as fp:
            args.inputs[key_name] = json.load(fp)
            
    # get list of protein coding ids
    annot_dir = "{}/annotations".format(args.out_dir)
    os.system("mkdir -p {}".format(annot_dir))
    pc_genes = "{}/genes.pc.txt.gz".format(annot_dir)
    if not os.path.isfile(pc_genes):
        get_proteincoding_gene_list_from_gtf(
            args.inputs["annot"]["gtf"], pc_genes)
    
    # get gene id conversions
    mapping_file = "{}/genes.pc.mappings.txt.gz".format(annot_dir)
    if not os.path.isfile(mapping_file):
        get_ensembl_to_geneid_mapping(pc_genes, mapping_file)

    # get TFs (Lambert et al resource)
    tfs = pd.read_csv(args.inputs["annot"]["tfs"], sep="\t", comment="#")
    tfs = tfs[tfs.iloc[:,3] == "Yes"]
        
    # for each dataset, make matrices
    data_dirs = args.inputs["data"]
    datasets = ["lcm", "organotypic"] # TODO load organotypic also
    for dataset in datasets:
        
        # make matrix
        matrices_dir = "{}/{}/matrices".format(args.out_dir, dataset)
        os.system("mkdir -p {}".format(matrices_dir))
        mat_files = make_matrix(
            data_dirs[dataset],
            data_dirs["quant_main_dir"],
            matrices_dir)

        # filter matrices for protein coding
        mat_pc_files = []
        for mat_file in mat_files:
            mat_pc_file = filter_by_ids(mat_file, pc_genes)
            mat_pc_files.append(mat_pc_file)
            
        # filter for expressed (heuristic threshold)
        mat_pc_filt_files = filter_for_expressed(mat_pc_files)

        # run differential expression on this matrix (counts only)
        diff_dir = "{}/{}/deseq2".format(args.out_dir, dataset)
        os.system("mkdir -p {}".format(diff_dir))
        diff_prefix = "{}/{}.diff".format(diff_dir, dataset)
        if False:
            run_sequential_deseq2(mat_pc_filt_files[1], diff_prefix)

    # set up for gene sets
    set_dir = "{}/gene_sets".format(args.out_dir)
    os.system("mkdir -p {}".format(set_dir))
    
    # generate LCM progenitor signature
    lcm_background_file = "{}/lcm/matrices/tpms.pc.mat.txt.gz".format(args.out_dir)
    lcm_progenitor_gene_sig_file = "{}/gene_signature.lcm_progenitor.txt.gz".format(set_dir)
    lcm_diff_dir = "{}/lcm/deseq2".format(args.out_dir)
    lcm_diff_file = "{}/lcm/deseq2/lcm.diff.suprabasal-LCM_over_basal-LCM_sigResultsAll.log2_thresh.txt.gz".format(
        args.out_dir)
    lcm_diff_down_file = "{}/lcm/deseq2/lcm.diff.suprabasal-LCM_over_basal-LCM_sigResultsDown.log2_thresh.txt.gz".format(
        args.out_dir)
    if not os.path.isfile(lcm_progenitor_gene_sig_file):
        make_gene_signature_file(
            lcm_diff_file,
            mapping_file,
            lcm_progenitor_gene_sig_file,
            filt_file=lcm_diff_down_file,
            background_file=lcm_background_file)
    
    # generate LCM differentiated signature
    lcm_differentiated_gene_sig_file = "{}/gene_signature.lcm_differentiated.txt.gz".format(set_dir)
    lcm_diff_up_file = "{}/lcm/deseq2/lcm.diff.suprabasal-LCM_over_basal-LCM_sigResultsUp.log2_thresh.txt.gz".format(
        args.out_dir)
    if not os.path.isfile(lcm_differentiated_gene_sig_file):
        make_gene_signature_file(
            lcm_diff_file,
            mapping_file,
            lcm_differentiated_gene_sig_file,
            filt_file=lcm_diff_up_file,
            sort_ascending=False,
            background_file=lcm_background_file)
    
    # generate organotypic differentiated signature
    organotypic_background_file = "{}/organotypic/matrices/tpms.pc.mat.txt.gz".format(args.out_dir)
    organotypic_differentiated_gene_sig_file = "{}/gene_signature.organotypic_differentiated.txt.gz".format(set_dir)
    organotypic_diff_file = "{}/organotypic/deseq2/organotypic.diff.d6-organotypic_over_d0-organotypic_sigResultsAll.log2_thresh.txt.gz".format(
        args.out_dir)
    organotypic_diff_up_file = "{}/organotypic/deseq2/organotypic.diff.d6-organotypic_over_d0-organotypic_sigResultsUp.log2_thresh.txt.gz".format(
        args.out_dir)
    if not os.path.isfile(organotypic_differentiated_gene_sig_file):
        make_gene_signature_file(
            organotypic_diff_file,
            mapping_file,
            organotypic_differentiated_gene_sig_file,
            filt_file=organotypic_diff_up_file,
            sort_ascending=False,
            background_file=organotypic_background_file)

    # build joint table for TFs
    tf_dir = "{}/tfs".format(args.out_dir)
    os.system("mkdir -p {}".format(tf_dir))

    # load in lcm TPMs
    lcm_tpms = "{}/lcm/matrices/tpms.pc.mat.txt.gz".format(args.out_dir)
    tf_table = pd.read_csv(lcm_tpms, sep="\t")
    tf_table = tf_table[tf_table["gene_id"].isin(tfs["ID"])]
    tf_table = tf_table.set_index("gene_id")
    tf_table.columns = ["LCM.tpm.basal", "LCM.tpm.suprabasal"]
    tf_table["LCM.tpm.max"] = np.max(tf_table.values, axis=1)
    
    # load in lcm expr and merge
    lcm_expressed_file = "{}/lcm/matrices/tpms.pc.expr_filt.mat.txt.gz".format(args.out_dir)
    lcm_expressed = pd.read_csv(lcm_expressed_file, sep="\t")
    lcm_expressed["LCM.expressed"] = 1
    lcm_expressed = lcm_expressed.set_index("gene_id")
    lcm_expressed = lcm_expressed[["LCM.expressed"]]
    tf_table = tf_table.merge(lcm_expressed, left_index=True, right_index=True, how="left")
    tf_table.loc[tf_table["LCM.expressed"] != 1, "LCM.expressed"] = 0
    
    # load in lcm FCs and merge
    lcm_deseq_file = "{}/lcm/deseq2/lcm.diff.suprabasal-LCM_over_basal-LCM_resultsAll.txt.gz".format(
        args.out_dir)
    lcm_deseq = pd.read_csv(lcm_deseq_file, sep="\t")
    lcm_deseq = lcm_deseq[["log2FoldChange"]]
    lcm_deseq.columns = ["LCM.log2FC.suprabasal_over_basal"]
    lcm_deseq["LCM.log2FC.max"] = np.max(np.abs(lcm_deseq.values), axis=1)
    tf_table = tf_table.merge(lcm_deseq, left_index=True, right_index=True, how="left")

    # load in sig info and merge
    lcm_deseq_sig_file = "{}/lcm/deseq2/lcm.diff.suprabasal-LCM_over_basal-LCM_sigResultsAll.log2_thresh.txt.gz".format(
        args.out_dir)
    lcm_deseq_sig = pd.read_csv(lcm_deseq_sig_file, sep="\t")
    lcm_deseq_sig["LCM.diff.sig"] = 1
    lcm_deseq_sig = lcm_deseq_sig[["LCM.diff.sig"]]
    tf_table = tf_table.merge(lcm_deseq_sig, left_index=True, right_index=True, how="left")

    # load in organotypic tpms and merge
    organotypic_tpms = "{}/organotypic/matrices/tpms.pc.mat.txt.gz".format(args.out_dir)
    tpms = pd.read_csv(organotypic_tpms, sep="\t")
    tpms = tpms.set_index("gene_id")
    tpms.columns = ["3D.tpm.d0", "3D.tpm.d3", "3D.tpm.d6"]
    tpms["3D.tpm.max"] = np.max(tpms.values, axis=1)
    tf_table = tf_table.merge(tpms, left_index=True, right_index=True, how="left")

    # load in organotypic expressed and merge
    organotypic_expressed_file = "{}/organotypic/matrices/tpms.pc.expr_filt.mat.txt.gz".format(args.out_dir)
    organotypic_expressed = pd.read_csv(organotypic_expressed_file, sep="\t")
    organotypic_expressed["3D.expressed"] = 1
    organotypic_expressed = organotypic_expressed.set_index("gene_id")
    organotypic_expressed = organotypic_expressed[["3D.expressed"]]
    tf_table = tf_table.merge(organotypic_expressed, left_index=True, right_index=True, how="left")
    tf_table.loc[tf_table["3D.expressed"] != 1, "3D.expressed"] = 0

    # load in organotypic FCs and merge
    organotypic_d3_d0_file = "{}/organotypic/deseq2/organotypic.diff.d3-organotypic_over_d0-organotypic_resultsAll.txt.gz".format(
        args.out_dir)
    organotypic_deseq = pd.read_csv(organotypic_d3_d0_file, sep="\t")
    organotypic_deseq = organotypic_deseq[["log2FoldChange"]]
    organotypic_deseq.columns = ["3D.log2FC.d3_over_d0"]
    tf_table = tf_table.merge(organotypic_deseq, left_index=True, right_index=True, how="left")

    organotypic_d6_d0_file = "{}/organotypic/deseq2/organotypic.diff.d6-organotypic_over_d0-organotypic_resultsAll.txt.gz".format(
        args.out_dir)
    organotypic_deseq = pd.read_csv(organotypic_d6_d0_file, sep="\t")
    organotypic_deseq = organotypic_deseq[["log2FoldChange"]]
    organotypic_deseq.columns = ["3D.log2FC.d6_over_d0"]
    tf_table = tf_table.merge(organotypic_deseq, left_index=True, right_index=True, how="left")
    tf_table["3D.log2FC.max"] = np.max(
        np.abs(tf_table[["3D.log2FC.d3_over_d0", "3D.log2FC.d6_over_d0"]].values),
        axis=1)
    
    # load in sig info and merge
    organotypic_d3_d0_sig_file = "{}/organotypic/deseq2/organotypic.diff.d3-organotypic_over_d0-organotypic_sigResultsAll.log2_thresh.txt.gz".format(args.out_dir)
    deseq_sig = pd.read_csv(organotypic_d3_d0_sig_file, sep="\t")
    deseq_sig["3D.diff.d3_over_d0.sig"] = 1
    deseq_sig = deseq_sig[["3D.diff.d3_over_d0.sig"]]
    tf_table = tf_table.merge(deseq_sig, left_index=True, right_index=True, how="left")

    organotypic_d6_d0_sig_file = "{}/organotypic/deseq2/organotypic.diff.d6-organotypic_over_d0-organotypic_sigResultsAll.log2_thresh.txt.gz".format(args.out_dir)
    deseq_sig = pd.read_csv(organotypic_d6_d0_sig_file, sep="\t")
    deseq_sig["3D.diff.d6_over_d0.sig"] = 1
    deseq_sig = deseq_sig[["3D.diff.d6_over_d0.sig"]]
    tf_table = tf_table.merge(deseq_sig, left_index=True, right_index=True, how="left")

    # load GGR rlog norm vals and merge
    ggr_rlog = args.inputs["data"]["ggr"]["rlog"]
    rlog = pd.read_csv(ggr_rlog, sep="\t")
    rlog.columns = ["GGR.{}".format(val) for val in rlog.columns]
    rlog["GGR.max"] = np.max(rlog.values, axis=1)
    tf_table = tf_table.merge(rlog, left_index=True, right_index=True, how="left")
    tf_table["GGR.expressed"] = ~pd.isna(tf_table["GGR.d60"])
    tf_table["GGR.expressed"] = tf_table["GGR.expressed"].astype(int)
    
    # load GGR dynamic and merge
    ggr_dynamic_file = args.inputs["data"]["ggr"]["dynamic"]
    ggr_dynamic = pd.read_csv(ggr_dynamic_file, sep="\t")
    ggr_dynamic = ggr_dynamic.set_index("id")
    ggr_dynamic.columns = ["GGR.dynamic.traj"]
    tf_table = tf_table.merge(ggr_dynamic.astype(int), left_index=True, right_index=True, how="left")
    
    # add in hgnc
    mappings = pd.read_csv(mapping_file, sep="\t")
    mappings.index = mappings["ensembl_gene_id"].values
    mappings = mappings[["hgnc_symbol", "ensembl_gene_id"]]
    mappings = mappings.drop_duplicates()
    tf_table = tf_table.merge(mappings, left_index=True, right_index=True, how="left")
    
    # load in patient scRNA-seq data differential results
    sc_dir = args.inputs["data"]["patient_singlecell"]["dir"]    
    sc_diff = pd.read_csv("{}/{}".format(
        sc_dir, args.inputs["data"]["patient_singlecell"]["dynamic"]), sep="\t")
    sc_diff = sc_diff[["p_val", "avg_logFC", "pct.1", "pct.2", "p_val_adj"]]
    sc_diff.columns = ["sc.{}".format(val) for val in sc_diff.columns]
    sc_diff["sc.diff"] = (sc_diff["sc.p_val_adj"] < 0.05).astype(int)
    sc_diff["sc.diff.logFC"] = sc_diff["sc.diff"].values * (sc_diff["sc.avg_logFC"] > 0.5).values.astype(int)
    sc_diff["hgnc_symbol"] = sc_diff.index.values
    tf_table = tf_table.merge(sc_diff, on="hgnc_symbol", how="left")
    tf_table["sc.diff"] = tf_table["sc.diff"].fillna(0)
    
    # load in patient scRNA-seq data log vals and merge
    sc_log_vals = pd.read_csv("{}/{}".format(
        sc_dir, args.inputs["data"]["patient_singlecell"]["log_vals"]), sep="\t")
    sc_log_vals.columns = ["sc.{}".format(val) for val in sc_log_vals.columns]
    sc_log_vals["sc.max"] = np.max(sc_log_vals.values, axis=1)
    sc_log_vals["hgnc_symbol"] = sc_log_vals.index.values
    tf_table = tf_table.merge(sc_log_vals, on="hgnc_symbol", how="left")
    
    # save out
    out_file = "{}/keratinocyte_tfs_summary.full.txt".format(tf_dir)
    tf_table.to_csv(out_file, sep="\t")

    # now filter: only keep if seen in at least one of the datasets
    tf_table = tf_table.loc[
        (tf_table["LCM.expressed"] > 0) |
        (tf_table["3D.expressed"] > 0) |
        (tf_table["GGR.expressed"] > 0) |
        (tf_table["sc.Basal_Avg"] > 0) |
        (tf_table["sc.Diff_Avg"] > 0)]

    # and sort
    tf_table = tf_table.sort_values(
        ["sc.diff", "GGR.dynamic.traj", "3D.diff.d6_over_d0.sig", "LCM.diff.sig", "sc.max"],
        ascending=[False, False, False, False, False])
    #tf_table.insert(0, "ensembl_gene_id", tf_table.index.values)
    tf_table = tf_table.reset_index(drop=True)

    # and save
    out_file = "{}/keratinocyte_tfs_summary.expressed.txt".format(tf_dir)
    tf_table.to_csv(out_file, sep="\t")
    
    return


if __name__ == '__main__':
    main()
